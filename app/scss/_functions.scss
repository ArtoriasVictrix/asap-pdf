// ===============================================
// PROJECT FUNCTIONS
// ===============================================


@use 'sass:map';
@use 'sass:string';


/*
	Replace `$search` with `$replace` in `$string`.
	Author: Kitty Giraudel.
	Source: https://css-tricks.com/snippets/sass/str-replace-function/
*/
@function string-replace($string, $search, $replace: '') {
	$index: string.index($string, $search);

	@if $index {
		@return string.slice($string, 1, $index - 1) + $replace + string-replace(string.slice($string, $index + string.length($search)), $search, $replace);
	}

	@return $string;
}


/*
	Function to create the second part of the class name. For example:
	the 'n20p' of .m-n20p class is generated by this function.
*/
@function create-name($value, $type: '') {
	@if ($value != 0) {
		// Add prefix 'n' if value is negative
		$value:
			if(
				string.slice(#{$value}, 0, 1) == '-',
				'n' + string.slice(#{$value}, 2),
				$value
			);

		// Replace dot with dash
		$value:
			if(
				string.index(#{$value}, '.') != null,
				string-replace(#{$value}, '.', '-'),
				$value
			);

		$value: $value + if($type == '%', 'p', if($type == 'px', '', $type));
	}

	@return $value;
}


/*
	Function to create a map from a given range parameters:
	1) start value of range;
	2) end value of range;
	3) range step;
	4) class name postfix (defined by value type).

	For example, create-range(4, 12, 4, '%') returns a map:
	(
		4p: 4%,
		8p: 8%,
		12p: 12%
	)
*/
@function create-range($start, $end, $step, $value-type) {
	$map: (
		#{create-name($start, $value-type)}:
		#{$start + if($start != 0, $value-type, '')}
	);

	$i: $start + $step;

	@while $i <= $end {
		$map:
			map.merge($map, (
				#{create-name($i, $value-type)}:
				#{$i + if($i != 0, $value-type, '')}
			),
		);

		$i: $i + $step;
	}

	@return $map;
}


@function divide($dividend, $divisor, $precision: 10) {
	$sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
	$dividend: abs($dividend);
	$divisor: abs($divisor);

	@if $dividend == 0 {
		@return 0;
	}

	@if $divisor == 0 {
		@error 'Cannot divide by 0';
	}

	// stylelint-disable-next-line order/order
	$remainder: $dividend;
	$result: 0;
	$factor: 10;

	@while ($remainder > 0 and $precision >= 0) {
		$quotient: 0;

		@while ($remainder >= $divisor) {
			$remainder: $remainder - $divisor;
			$quotient: $quotient + 1;
		}

		// stylelint-disable-next-line order/order
		$result: $result * 10 + $quotient;
		$factor: $factor * .1;
		$remainder: $remainder * 10;
		$precision: $precision - 1;

		@if ($precision < 0 and $remainder >= $divisor * 5) {
			$result: $result + 1;
		}
	}

	// stylelint-disable-next-line order/order
	$result: $result * $factor * $sign;
	$dividend-unit: unit($dividend);
	$divisor-unit: unit($divisor);
	$unit-map: (
		'px': 1px,
		'rem': 1rem,
		'em': 1em,
		'%': 1%
	);

	@if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {
		$result: $result * map-get($unit-map, $dividend-unit);
	}

	@return $result;
}
